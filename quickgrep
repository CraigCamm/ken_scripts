#!/usr/bin/php -q
<?php
/*
    This is a script that acts like grep, but only for one file, it allows you to specify
    the number of lines you want it to look at.  It keeps a file seek pointer for how far
    it read into the file, so that you can look at N lines of the file at a time.

    Every time you run this on a file, it keeps track of where it was the last time you 
    searched the file in question with specific search terms.  So if you:

    quickgrep "SOME ERROR" biglog.log

    Every time you run that command it will give you the lines you didnt read the last time.
    You can also:

    quickgrep "SOME ERROR" biglog.log --lines=150

    And it will only look at the first 150 lines starting at where you left off the last time
    you ran that command.  File seek pointers are stored based on filename AND search so if you
    change the search string you will start back at the top of the file.

    If you do:

    quickgrep "SOME ERROR" biglog.log --pointer

    It will tell you at what point the seek pointer is for that search and the filename where
    that pointer is being stored.

    You can also do:

    quickgrep "SOME ERROR" biglog.log --pointer=31415926535898

    To set the seek pointer to byte 31415926535898

    --verbose Gives you some extra information in obnoxious hash tag blocks.

    --results works like lines, but stops when you have output a number of results, regardless
    of how many lines you have parsed.

    --transmute allows you to specify a file with lines of preg_replace valid search/replace strings
    in the format of: 
    
    /search/replace/mi

    It will run these from top to bottom on each line to change the output format of your data.
 */

// Change this if you want to use a different folder name to store the pointer files.
///////////////////////////////////
// ~/ doesnt seem to work in php.
$parser_home = ".ken_log_parser";
$parser_home = getenv("HOME")."/".$parser_home;
///////////////////////////////////

// If the above can't be found or created we have to stop here.
if(!file_exists($parser_home)) mkdir($parser_home) or die("Folder {$parser_home} could not be created.\n");

// Shows Usage and dies.
function die_with_usage($str=NULL) {
    global $argv;
    if(isset($str)) fwrite(STDERR,"ERROR: {$str}\n\n");
    $usage = "Usage: $argv[0] <regex search> <filename> [options]\n".
        "    --pointer=#       Set/Reset file seek pointer.\n".
        "    --pointer         Gives pointer information.\n".
        "    --lines=#         Limit the number of lines to parse.\n".
        "    --results=#       Limit the number of matches to return.\n".
        "    --transmute=file  Limit the number of matches to return.\n".
        "    --verbose         Shows debug info, including the pointer filename\n".
        "    --help            Shows this message.\n";
    die($usage);
}

// Checks for a command line option, returning stuff.
// Supports --option  --option=value  and  --option="value"
// Returns TRUE if --option, the value if --option=value and FALSE otherwise.
function checkopt($opt) {
    global $argv;
    foreach(array_slice($argv,3) as $argument) {
        if(preg_match("/--{$opt}=/",$argument)) {
            return preg_replace("/^--{$opt}=/","",$argument);
        } else if(preg_match("/^--{$opt}/",$argument)) {
            return TRUE;
        }
    }
    return FALSE;
}

// Writes to STDERR if --verbose has been used.
function vwrite($str) {
    global $verbose;
    if($verbose===TRUE) {
        fwrite(STDERR,$str);
    }
}

// When passed an array of PCRE patterns it will loop through them on each row to format data.
function transmute($str,$pattern_array) {
    foreach($pattern_array as $pattern) {
        $pat = preg_split('/(?<!\\\)\//',$pattern);
        $search = $pat[1];
        $replace = $pat[2];
        $commands = $pat[3];
        $str = preg_replace("/{$search}/$commands",$replace,$str);
    }   
    return $str;
}

// ARGUMENT VERIFICATION

// Not enough arguments.
if($argc<2) die_with_usage();

// Asking for help.
if(checkopt("help")===TRUE) die_with_usage();

// Set verbose.
$verbose = checkopt("verbose");

// Set line limit.
$lines = checkopt("lines");
// Set result limit.
$results = checkopt("results");

// Get transmute file
$transmute = checkopt("transmute");
$patterns = array();
if($transmute===TRUE) die_with_usage();
if(file_exists($transmute)) {
    $lines = file($transmute);
    foreach($lines as $line) {
        if(!preg_match("/^ *\t*#/",$line))
            $patterns[] = $line;
    }
}

// Verify the file exists.
$file = $argv[2];
if(!file_exists($file)) die_with_usage("File {$file} does not exist or cannot be accessed.");

// Setting Search String.
$search = $argv[1];

// Getting hash for pointer file.
$hash = sha1(basename($file).$search);
$ptr_file = $parser_home."/".$hash;

// Seeing if we can either open or create the pointer file.
$arg_ptr = checkopt("pointer");
// Just want the file pointer output
// Put the new pointer in the file.
if($arg_ptr!==FALSE) {
    file_put_contents($ptr_file,$arg_ptr);
    die("Seek pointer has been set to {$arg_ptr} for this search.\n");
} 
// Create the file if it does not exist.
if(!file_exists($ptr_file) ) {
    file_put_contents($ptr_file,0);
}
// Get the current poitner from the file.
$ptr = file_get_contents($ptr_file);
// Display pointer info.
if($arg_ptr===TRUE) die("The current file seek pointer is: {$ptr}\nPointer reference file for this search: {$ptr_file}\n");

vwrite("############################################################\n");
vwrite("######### ALL NON-DATA OUTPUT IS WRITTEN TO STDERR #########\n");
vwrite("############################################################\n");
vwrite("File used to track seek pointers for this search:\n");
vwrite("{$ptr_file}.\n");
vwrite("############################################################\n");
vwrite("Current Seek Pointer: {$ptr}\n");
vwrite("############################################################\n\n");

$f = fopen($file,"r");

fseek($f,(int)$ptr);

$line_buffer = "";
$eol_buffer = "";

$linecnt=0;
$resultcnt=0;

// Parse Lines
while(!feof($f)) {
    $chunk = fread($f,4096);
    for($i=0;$i<strlen($chunk);$i++) {
        $char = substr($chunk,$i,1);
        if(!preg_match("/[\r\n]/",$char)) {
            $line_buffer .= $char;
            $eol_buffer="";
        } else {
            // Skipping over \r\n because they pollute our logs.
            if($char=="\n" && !preg_match("/\r/",$eol_buffer)) {
                if(preg_match("/{$search}/",$line_buffer)) {
                    if($transmute!==FALSE)
                        $line_buffer = transmute($line_buffer,$patterns);
                    fwrite(STDOUT,$line_buffer."\n");
                    $resultcnt++;
                    if($results!==FALSE && $resultcnt>=$results) {
                        $ptr-=strlen($chunk)-$i;
                        break 2;
                    }
                }
                $line_buffer="";
                $linecnt++;
                // Parsed our goal number of lines
                if($lines!==FALSE && $linecnt>=$lines) {
                    $ptr-=strlen($chunk)-$i;
                    break 2;
                }
            } else {
                $eol_buffer .= $char;
            }
        }
    }
}

// Rewind seek pointer to beginning of current finished line
// In the case of having a line limit, so we dont miss a line.
$ptr -= strlen($line_buffer)+strlen($eol_buffer);

$ptr = ftell($f);
file_put_contents($ptr_file,$ptr);
vwrite("############################################################\n");
vwrite("Current Seek Pointer:\n");
vwrite("{$ptr}.\n");
vwrite("############################################################\n");
fclose($f);
